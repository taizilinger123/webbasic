1.什么是JS?
  1)JS是脚本语言
   --没有编译器的语言
   --JS和Java没有任何关系
  2)JS和Java的对比
   A.Java的特点
               面向对象：继承、封装、多态
   B.JS的特点
               基于对象：有对象，但不支持严格的继承、封装、多态
      --继承
          JS中没有继承的概念，但是它有原型的概念。每个对象都有一个prototype属性，用来指定该对象的原型对象，类似于继承。
      --封装
          JS中有不严格的封装，对象中封装的属性和方法是可以任意访问、修改的。
      --多态
          JS中的所有对象都是Object,即他们的根原型是Object。但是JS不像Java的多态那样严谨,JS中的对象可以赋值给任意类型的其他对象。
2.JS中的条件表达式
  1)布尔值
            和Java的规则一样;
  2)其他值
    JS中可以以任何数据作为表达式
    A.如果是非空的数据，则代表true
    B.如果是空的数据，则代表false
      0/null/""/undefined/NaN
                   一切表示空的数字都是false
#############################
F12->console
var a;
undefined
a
undefined
a;
undefined
var b = null;
undefined
b;
null
var c = "hello";
undefined
c;
"hello"
var b = 123;
undefined
b;
123
字符串和数字和布尔值互相转换
var s = "abc";
undefined
var n = 3.14;
undefined
var b = true;
undefined
s+n;
"abc3.14"
s+b;
"abctrue"
n+b;
4.140000000000001
b+b;
2
强制转换
true.toString();
"true"
parseInt("3.14");
3
parseInt("6.89");
6
parseFloat("3.14");
3.14
parseFloat("3");
3
parseFloat("3.14a");
3.14
parseFloat("3.14abcdefg");
3.14
parseFloat("abc");
NaN
####################
typeof("abc");
"string"
typeof(123);
"number"
typeof(true);
"boolean"
######################
isNaN(is not a number)难道这不是数字吗？
isNaN("abc");
true
isNaN(123);
false
##################
var a = "123";
undefined
var b = 123;
undefined
var c = 123;
undefined
a==b
true
a===b
false
b===c
true
#######################
排错：排除+二分法(把函数里代码全部注释看会不会报错，然后代码打开二分法排除,F12浏览器console看有没有报错)
#######################
1==1?1:2
1
1==2?1:2
2
"A"?1:2;
1
0?1:2;
2
null?1:2;
2
###########################
var s1 = "abc";
undefined
var s2 = new String("def");
undefined
s1.length;
3
s2.length;
3
"abc".toUpperCase();
"ABC"
"abc".toLowerCase();
"abc"
"JavaScript".charAt(3);
"a"
"JavaScript".charCodeAt(3);
97
"其实JavaScript和Java挺像".indexOf("Java")
2
"其实JavaScript和Java挺像".lastIndexOf("Java")
13
"abcdefg".substring(3,6);
"def"
"abcdefg".substring(3);
"defg"
"JavaScript像Java,但不是Java.".replace("Java","苍老师");
"苍老师Script像Java,但不是Java."
"周一,周二,周三,周四,周五".split(",");
(5) ["周一", "周二", "周三", "周四", "周五"]
3.1415926.toFixed(2);
"3.14"
3.1415926.toFixed(4);
"3.1416"
3.1.toFixed(2);
"3.10"
var i = 3.1;
undefined
i.toFixed(2);
"3.10"
###################################
var a = new Array();
undefined
a.length
0
a[0]=1
1
a.length
1
a.push(2)
2
a.length
2
var b = [1,2,3];
undefined
b.length
3
var c = [[1,2],[3,4],[5,6]];
undefined
c.length
3
var a = [8,3,9,5,2];
undefined
a.reverse()
(5) [2, 5, 9, 3, 8]
a.sort()
(5) [2, 3, 5, 8, 9]
var a = [8,5,9,6,2,40];
undefined
a.sort();
(6) [2, 40, 5, 6, 8, 9]
function compare(j,i){return i-j}
undefined
a.sort();
(6) [2, 40, 5, 6, 8, 9]
a.sort(compare);
(6) [40, 9, 8, 6, 5, 2]
function compare(j,i){return j-i}
undefined
a.sort(compare);
(6) [2, 5, 6, 8, 9, 40]
1.数组的排序sort()
  1)排序有2个要素
    A.排序规则
    B.比较方法
  2)排序规则
    sort方法的排序规则是预置的，且永远不能改变，它永远按照由小到大的顺序来排序。
            即当2个数比较结果是负数时，将2个数换位。
  3)比较方法
    --js预置了比较方法，默认返回2个数j,i相减的值;
    --排序规则就是基于这个返回值做出的排序;
    --该比较方法是可以置换的，修改返回值则会对排序规则产生影响。
##################################################
Math.abs(-3)
3
Math.round(3.14)
3
Math.round(3.5)
4
var a = new Date();
undefined
a
Sat Dec 21 2019 19:56:29 GMT+0800 (中国标准时间)
var b = new Date("2015-01-01 01:01:01");
undefined
b
Thu Jan 01 2015 01:01:01 GMT+0800 (中国标准时间)
a.getTime()
1576929389413
a.getDate()
21
a.getDay()
6
a.getFullYear()
2019
a.toLocaleDateString()
"2019/12/21"
a.toLocaleTimeString()
"下午7:56:29"
###########################################
var a = /\d{3}/;
undefined
a.exec("abc123def")
["123", index: 3, input: "abc123def", groups: undefined]0: "123"groups: undefinedindex: 3input: "abc123def"length: 1__proto__: Array(0)
var b = /^\d{3,6}$/;
undefined
b.test("abc123def");
false
b.test("12");
false
b.test("1234");
true
var s = "其实JavaScript很像Java的";
undefined
var n = /Java/g;
undefined
s.match(n)
(2) ["Java", "Java"]
s.search(n)
2
var s = "其实JavaScript很像Java的";
undefined
s.replace(n, "KKK")
"其实KKKScript很像KKK的"